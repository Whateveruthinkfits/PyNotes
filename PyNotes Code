import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog
import json
from os.path import exists

# gespeicherte Notizen
DATA_FILE = "notebooks.json"

# Dateien laden
def load_data():
    if exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

# App
class NotesApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Notizen-App")
        
        self.data = load_data()
        self.current_notebook = None
        self.current_note = None
        
        # Notizbuchauswahl
        self.notebook_frame = tk.Frame(self.root)
        self.notebook_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        self.notebook_listbox = tk.Listbox(self.notebook_frame)
        self.notebook_listbox.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.notebook_listbox.bind("<<ListboxSelect>>", self.select_notebook)
        
        self.new_notebook_button = tk.Button(
            self.notebook_frame, text="Neues Notizbuch", command=self.add_notebook)
        self.new_notebook_button.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Notizauswahl
        self.notes_frame = tk.Frame(self.root)
        self.notes_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        self.notes_listbox = tk.Listbox(self.notes_frame)
        self.notes_listbox.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        self.notes_listbox.bind("<<ListboxSelect>>", self.select_note)
        
        self.new_note_button = tk.Button(
            self.notes_frame, text="Neue Notiz", command=self.add_note)
        self.new_note_button.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Notizinhalt
        self.content_frame = tk.Frame(self.root)
        self.content_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        self.text_area = tk.Text(self.content_frame)
        self.text_area.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        
        self.save_button = tk.Button(
            self.content_frame, text="Speichern", command=self.save_note)
        self.save_button.pack(side=tk.BOTTOM, fill=tk.X)
        
        self.delete_button = tk.Button(
            self.content_frame, text="Löschen", command=self.delete_note)
        self.delete_button.pack(side=tk.BOTTOM, fill=tk.X)
        
        self.refresh_notebook_list()
    
    def refresh_notebook_list(self):
        self.notebook_listbox.delete(0, tk.END)
        for notebook in self.data.keys():
            self.notebook_listbox.insert(tk.END, notebook)
    
    def refresh_notes_list(self):
        self.notes_listbox.delete(0, tk.END)
        if self.current_notebook:
            for note in self.data[self.current_notebook]:
                self.notes_listbox.insert(tk.END, note)
    
    def add_notebook(self):
        name = simpledialog.askstring("Notizbuch hinzufügen", "Name des Notizbuchs:")
        if name and name not in self.data:
            self.data[name] = {}
            save_data(self.data)
            self.refresh_notebook_list()
        elif name in self.data:
            messagebox.showerror("Fehler", "Notizbuch existiert bereits.")
    
    def select_notebook(self, event):
        selection = self.notebook_listbox.curselection()
        if selection:
            self.current_notebook = self.notebook_listbox.get(selection[0])
            self.refresh_notes_list()
    
    def add_note(self):
        if not self.current_notebook:
            messagebox.showerror("Fehler", "Bitte zuerst ein Notizbuch auswählen.")
            return
        name = simpledialog.askstring("Notiz hinzufügen", "Titel der Notiz:")
        if name and name not in self.data[self.current_notebook]:
            self.data[self.current_notebook][name] = ""
            save_data(self.data)
            self.refresh_notes_list()
        elif name in self.data[self.current_notebook]:
            messagebox.showerror("Fehler", "Notiz existiert bereits.")
    
    def select_note(self, event):
        selection = self.notes_listbox.curselection()
        if selection:
            self.current_note = self.notes_listbox.get(selection[0])
            content = self.data[self.current_notebook][self.current_note]
            self.text_area.delete(1.0, tk.END)
            self.text_area.insert(tk.END, content)
    
    def save_note(self):
        if not self.current_note:
            messagebox.showerror("Fehler", "Bitte zuerst eine Notiz auswählen.")
            return
        content = self.text_area.get(1.0, tk.END).strip()
        self.data[self.current_notebook][self.current_note] = content
        save_data(self.data)
        messagebox.showinfo("Gespeichert", "Notiz wurde gespeichert.")
    
    def delete_note(self):
        if not self.current_note:
            messagebox.showerror("Fehler", "Bitte zuerst eine Notiz auswählen.")
            return
        del self.data[self.current_notebook][self.current_note]
        self.current_note = None
        save_data(self.data)
        self.refresh_notes_list()
        self.text_area.delete(1.0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = NotesApp(root)
    root.mainloop()
